rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/schooladmin/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/schooladmin/$(request.auth.uid)).data.role in ["Administrator", "Principal"];
    }
    
    function isTeacher() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/teachers/$(request.auth.uid));
    }
    
    // Simplified: Allow any authenticated user to read schooladmin collection for authentication
    function isSchoolAdmin() {
      return isAuthenticated();
    }
    
    function isValidEmail(email) {
      return email.matches('^[^@]+@[^@]+\\.[^@]+$');
    }
    
    function isValidPassword(password) {
      return password is string && password.size() >= 6;
    }
    
    // School Admin Collection - Allow email-based lookup for authentication
    match /schooladmin/{adminId} {
      allow read: if isAuthenticated() && (
        // Allow reading own document by UID
        request.auth.uid == adminId ||
        // Allow reading by email for authentication purposes
        (
          request.auth.token.email != null &&
          (
            (resource.data.keys().hasAny(['emailaddress']) && resource.data.emailaddress == request.auth.token.email) ||
            (resource.data.keys().hasAny(['email']) && resource.data.email == request.auth.token.email)
          )
        )
      );
      allow create: if isAuthenticated() && (
        (
          request.auth.uid == adminId &&
          request.auth.token.email != null &&
          request.resource.data.keys().hasAll(['emailaddress', 'password', 'name', 'role', 'school_id']) &&
          isValidEmail(request.resource.data.emailaddress) &&
          isValidPassword(request.resource.data.password) &&
          request.resource.data.role in ['Administrator', 'School Admin', 'Principal'] &&
          request.resource.data.school_id is string &&
          (
            request.resource.data.emailaddress == request.auth.token.email ||
            (request.resource.data.keys().hasAny(['email']) && request.resource.data.email == request.auth.token.email)
          )
        ) || isAdmin()
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == adminId || isAdmin()
      ) &&
        // Allow password updates for own account
        (!('password' in request.resource.data) || 
         (request.auth.uid == adminId && isValidPassword(request.resource.data.password))) &&
        (!('emailaddress' in request.resource.data) || isValidEmail(request.resource.data.emailaddress));
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Schools Collection - Allow access for authenticated users
    match /schools/{schoolId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (isSchoolAdmin() || isAdmin());
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Students Collection - Allow access for authenticated users
    match /students/{studentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      ) &&
        request.resource.data.keys().hasAll(['firstname', 'lastname', 'class', 'school_id']) &&
        request.resource.data.firstname is string &&
        request.resource.data.lastname is string &&
        request.resource.data.class is string &&
        request.resource.data.school_id is string;
      allow update: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      ) &&
        (!('firstname' in request.resource.data) || request.resource.data.firstname is string) &&
        (!('lastname' in request.resource.data) || request.resource.data.lastname is string) &&
        (!('class' in request.resource.data) || request.resource.data.class is string) &&
        (!('school_id' in request.resource.data) || request.resource.data.school_id is string);
      allow delete: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      );
    }
    
    // Teachers Collection - Allow access for authenticated users
    match /teachers/{teacherId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      ) &&
        request.resource.data.keys().hasAll(['firstname', 'lastname', 'email', 'school_id']) &&
        request.resource.data.firstname is string &&
        request.resource.data.lastname is string &&
        isValidEmail(request.resource.data.email) &&
        request.resource.data.school_id is string;
      allow update: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      ) &&
        (!('firstname' in request.resource.data) || request.resource.data.firstname is string) &&
        (!('lastname' in request.resource.data) || request.resource.data.lastname is string) &&
        (!('email' in request.resource.data) || isValidEmail(request.resource.data.email)) &&
        (!('school_id' in request.resource.data) || request.resource.data.school_id is string);
      allow delete: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      );
    }
    
    // Classes Collection - Allow access for authenticated users
    match /classes/{classId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      );
      allow delete: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      );
    }
    
    // Subjects Collection - Allow access for authenticated users
    match /subjects/{subjectId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      );
      allow delete: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      );
    }
    
    // Grades Collection - Allow access for authenticated users
    match /grades/{gradeId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (
        isSchoolAdmin() || isTeacher() || isAdmin()
      );
      allow delete: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      );
    }
    
    // Student Attendance Collection
    match /attendance/{attendanceId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (
        isSchoolAdmin() || isTeacher() || isAdmin()
      );
      allow delete: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      );
    }
    
    // Teacher Sign-in Collection
    match /teacher_sign_in/{signInId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        isSchoolAdmin() || isTeacher() || isAdmin()
      ) &&
        request.resource.data.keys().hasAll(['teacher_id', 'school_id', 'date']) &&
        request.resource.data.teacher_id is string &&
        request.resource.data.school_id is string &&
        request.resource.data.date is string;
      allow update: if isAuthenticated() && (
        isSchoolAdmin() || isTeacher() || isAdmin()
      );
      allow delete: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      );
    }
    
    // Subject Assignments Collection
    match /subject_assignments/{assignmentId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      ) &&
        request.resource.data.keys().hasAll(['student_id', 'subject_id', 'school_id', 'assigned_by']) &&
        request.resource.data.student_id is string &&
        request.resource.data.subject_id is string &&
        request.resource.data.school_id is string &&
        request.resource.data.assigned_by is string;
    }
    
    // Notifications Collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        isSchoolAdmin() || isTeacher() || isAdmin()
      ) &&
        request.resource.data.keys().hasAll(['title', 'message', 'type', 'school_id']) &&
        request.resource.data.title is string &&
        request.resource.data.message is string &&
        request.resource.data.type is string &&
        request.resource.data.school_id is string;
      allow update: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      );
      allow delete: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      );
    }
    
    // Timetable Collection
    match /timetable/{timetableId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      );
      allow delete: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      );
    }
    
    // Parents Collection - Allow access for any authenticated user (temporarily permissive for debugging)
    match /parents/{parentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        isSchoolAdmin() || isTeacher() || isAdmin()
      ) &&
        request.resource.data.keys().hasAll(['firstname', 'lastname', 'school_id']) &&
        request.resource.data.firstname is string &&
        request.resource.data.lastname is string &&
        request.resource.data.school_id is string &&
        (!('email' in request.resource.data) || isValidEmail(request.resource.data.email)) &&
        (!('phone' in request.resource.data) || request.resource.data.phone is string);
      allow update: if isAuthenticated() && (
        isSchoolAdmin() || isTeacher() || isAdmin()
      ) &&
        (!('firstname' in request.resource.data) || request.resource.data.firstname is string) &&
        (!('lastname' in request.resource.data) || request.resource.data.lastname is string) &&
        (!('school_id' in request.resource.data) || request.resource.data.school_id is string) &&
        (!('email' in request.resource.data) || isValidEmail(request.resource.data.email)) &&
        (!('phone' in request.resource.data) || request.resource.data.phone is string);
      allow delete: if isAuthenticated() && (
        isSchoolAdmin() || isAdmin()
      );
    }
    
    // Password Reset Codes Collection
    match /passwordResetCodes/{codeId} {
      allow read, update, delete: if isAuthenticated() && (
        request.auth.token.email == resource.data.email ||
        isAdmin()
      );
      allow create: if request.resource.data.keys().hasAll(['email', 'code', 'createdAt', 'expiresAt', 'used']) &&
        isValidEmail(request.resource.data.email) &&
        request.resource.data.code is string &&
        request.resource.data.code.size() == 4 &&
        request.resource.data.used is bool;
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 
